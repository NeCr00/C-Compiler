 program:    
             PROGRAM IDENTIFIER struct_stmt_list  function  main_section
          


main_section:
      STARTMAIN VARS  assignment_stmt_list statement_list ENDMAIN

statement_list:
      statement_list statement
      |statement

statement:
      empty_assignment_stmt_list
      |print_stmt
      |break_stmt
      |while_stmt
      |for_stmt
      |if_stmt
      |switch_case_stmt
      |create_struct
      |call_fun

call_fun:
      identifier LPAR RPAR
     
      |identifier expression_list
     

function:
      
      |FUNCTION identifier LPAR fun_target_list RPAR VARS assignment_stmt_list  statement_list  return_stmt ENDFUNCTION  
     

fun_target_list:
      fun_target
      |fun_target_list COMMA fun_target;

fun_target:
      type identifier

//============================================Other statements========================================
return_stmt:
      RETURN COL
      |RETURN target_return COL

target_return:
      literal
      |identifier

break_stmt:
	BREAK

//======================================Struct=======================================================
create_struct:
      STRUCT identifier identifier
     
      | identifier identifier

struct_stmt_list:
      struct_stmt
      |struct_stmt_list struct_stmt

struct_stmt:

      |struct
      |typedef_struct

struct: 
      STRUCT identifier VARS assignment_stmt_list ENDSTRUCT
    

typedef_struct: 
      TYPEDEF STRUCT identifier VARS assignment_stmt_list ENDSTRUCT
     
;

//============================================ Switch Case =====================================================


switch_case_stmt:
      switch case_list default ENDSWITCH
      |switch case_list  ENDSWITCH;

switch:
      SWITCH LPAR expression RPAR;

case_list:
      case_list case
      |case;

case:
      CASE LPAR expression RPAR COLON statement_list;

default:
      DEFAULT COLON statement_list;
//=========================================== If =======================================================
if_stmt:
      if ENDIF
      |if else ENDIF
      |if elseif_list ENDIF
      |if elseif_list else ENDIF;

if:
      IF LPAR expression RPAR THEN statement_list;

elseif_list:
      elseif_list elseif
      |elseif;

elseif: 
      ELSEIF LPAR expression RPAR statement_list;

else:
      ELSE statement_list;
//=============================== While For ===========================================================
while_stmt:
      WHILE LPAR expression RPAR statement_list ENDWHILE;
     
for_stmt:
      FOR identifier COLON EQUAL target_for TO target_for STEP target_for statement_list ENDFOR  ;

target_for:
      integer
      |floatnum;
//=================================Print===================================================
print_stmt:
      PRINT LPAR  RPAR COL
      |PRINT LPAR string RPAR COL
       
      |PRINT LPAR string LSBRA print_input RSBRA RPAR COL
      
      ;


print_input:
      identifier

      |integer

      |floatnum

      |character
     
      |string
      

//=====================================Expressions=========================================
expression_list:
	    expression_list COMMA expression
	    |LPAR expression_list  RPAR
          | expression


expression:
      atom
      |expression PLUS expression
      |expression MINUS expression
      |expression STAR expression
      |expression SLASH expression;
      |expression EXP expression;
      |expression comparison_op expression
      |expression logical_op expression
      |LPAR expression RPAR

atom:
      literal
      
      |identifier
      
      |string
      


//========================= Assigment====================================================== 


assignment_stmt_list:
      assignment_stmt COL
      | assignment_stmt_list assignment_stmt COL
      
assignment_stmt:
      type target
      |assignment_stmt EQUAL expression_list
      |assignment_stmt COMMA target
      |assignment_stmt COMMA target EQUAL expression_list


empty_assignment_stmt_list:
      empty_assignment_stmt COL
      

empty_assignment_stmt:
      target 
      |empty_assignment_stmt EQUAL expression_list
     

type:
    INTEGER
    |CHAR
    |FLOAT

target:
       IDENTIFIER;
       | IDENTIFIER  LSBRA integer RSBRA


//================================================ etc ========================================

comparison_op: 
        EQ_OP
        |NE_OP
        |GREATER_THAN_OP
        |LESS_THAN_OP
        |LE_OP
        |GE_OP

logical_op:
        AND
        |OR

string:
      SHORTSTRING
      

literal:
        integer
       
        | floatnum
       
        | character
       
        |MINUS integer
       
        |MINUS floatnum
        

character:
         CHARACTER
        

floatnum: 
        POINTFLOAT
        

integer:
          DECINTEGER
          

identifier:
            IDENTIFIER
            
